apiVersion: apps/v1
kind: Deployment
metadata:
  name: $JOB_NAME
spec:
  progressDeadlineSeconds: 120
  replicas: 1
  selector:
    matchLabels:
      name: $JOB_NAME
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: $JOB_NAME
        team: nimbus
      name: $JOB_NAME
    spec:
      containers:
        - name: $JOB_NAME
          env:
            - name: ENVIRONMENT
              value: $ENVIRONMENT
          image: gcr.io/$GCP_PROJECT_ID/$JOB_NAME:$IMAGE_TAG
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: blog-internal
          livenessProbe:
            initialDelaySeconds: 30
            failureThreshold: 3
            httpGet:
              path: /v1/health-check
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            initialDelaySeconds: 30
            failureThreshold: 3
            httpGet:
              path: /v1/health-check
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
      imagePullSecrets:
        - name: docker-image-pull-secret
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: $JOB_NAME
spec:
  metrics:
    - resource:
        name: cpu
        targetAverageUtilization: 75
      type: Resource
  minReplicas: 1
  maxReplicas: 2
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: $JOB_NAME
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: $JOB_NAME
  name: $JOB_NAME
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    name: $JOB_NAME
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: $SERVICE_PATH
    nginx.ingress.kubernetes.io/enable-cors: "true"
  name: $JOB_NAME
spec:
  rules:
    - host: $HOST
      http:
        paths:
          - backend:
              serviceName: $JOB_NAME
              servicePort: 80
            path: $SERVICE_PATH